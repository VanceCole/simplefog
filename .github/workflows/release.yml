name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    # get part of the tag after the `v`
    - name: Extract tag version number
      id: get_version
      uses: battila7/get-version-action@v2

    # Substitute the Manifest and Download URLs in the module.json for Pre-Release
    - name: Substitute Manifest and Download Links For Pre-Release Tests
      if: ${{ github.event.release.prerelease == true }}
      id: sub_manifest_link_version_prerelease
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/module.json'
      env:
        version: ${{steps.get_version.outputs.version-without-v}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/${{github.event.release.tag_name}}/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

    # Substitute the Manifest and Download URLs in the module.json in Releases
    - name: Substitute Manifest and Download Links For Versioned Ones
      if: ${{ github.event.release.prerelease == false }}
      id: sub_manifest_link_version
      uses: microsoft/variable-substitution@v1
      with:
        files: 'src/module.json'
      env:
        version: ${{steps.get_version.outputs.version-without-v}}
        url: https://github.com/${{github.repository}}
        manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
        download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip

    # Create a zip file with all files required by the module to add to the release
    - run: cd src; zip -r ./module.zip *

    # Create a release for this specific version
    - name: Update Release with Files
      id: create_version_release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true # Set this to false if you want to prevent updating existing releases
        name: ${{ github.event.release.name }}
        draft: ${{ github.event.release.unpublished }}
        prerelease: ${{ github.event.release.prerelease }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: './src/module.json, ./src/module.zip'
        tag: ${{ github.event.release.tag_name }}
        body: ${{ github.event.release.body }}
